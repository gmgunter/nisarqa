import yaml
import argparse

# TODO:
#     - Check that filepaths can be relative paths.
#     - Check if any of the optionals are required (e.g. the xml files).
#       If so, add the 'required' option to the parser, per:
#       https://docs.python.org/3/library/argparse.html#required
#     - Check if any optionals are mutually exclusive. If so, update parser.
#     - If a CLI argument was not provided AND no attribute should be added,
#       then use default=argparse.SUPPRESS
#     - Remove the kwds/args delineation. It is unnecessary with argparse.
#       Will require updating rest of code.
#     - Update to be able to take in multiple input files to be processed
#     - If --quality flag included, then fpdf and fhdf must be included (or default). O/w not needed.
#     - If --validate flag included, then xml_dir and xml_file must be included (or default). O/w not needed.    


def parse_args(nisar_product):
    '''
    Wrapper function for the parsing the command line arguments

    Parameters
    ----------
    nisar_product : str
        One of: 'rslc', 'gslc', 'gcov', 'gunw', 'runw', 'goff', 'roff', or 'rifg'

    Returns
    -------
    args : dict
        The parsed input arguments from either command line or the runconfig.
    '''

    # Parse the command line arguments
    args = parse_cli_args(nisar_product)

    # If a runconfig was provided, parse it.
    if args['runconfig']:
        args = parse_yaml(args['runconfig'])

    return args


def parse_cli_args(nisar_product):
    '''
    Parse the command line arguments

    Parameters
    ----------
    nisar_product : str
        One of: 'rslc', 'gslc', 'gcov', 'gunw', 'runw', 'goff', 'roff', or 'rifg'

    Returns
    -------
    args : dict
        The parsed arguments in a dictionary.
    '''

    xml_default = './xml/nisar_L1_%s.xml' % nisar_product.upper()

    parser = argparse.ArgumentParser(
                description='Quality Assurance script to verify NISAR product files generated by ISCE3',
                formatter_class=argparse.ArgumentDefaultsHelpFormatter
                )

    parser.add_argument('runconfig',
                        nargs='?',
                        type=str,
                        default='',
                        help='filepath to a runconfig file. If specified, all other'
                            'command line arguments will be ignored. If not included,'
                            'only the basic command line options will be exposed;'
                            'the remaining fields in the runcofig will be set to default.'
                        )

    parser.add_argument('--input', '--input_file',
                        dest='input_file',
                        type=str,
                        help='filepath for NISAR .h5 product file for QA.'
                             'Supported NISAR product types: rslc, gslc, gcov, gunw, runw,'
                             'goff, roff, and rifg.'
                        )

    parser.add_argument('--log', '--log_file',
                        dest='log_file',
                        type=str,
                        default='qa.log',
                        help='Name of log file, e.g. qa.log'
                        )

    parser.add_argument('--stats', '--stats_file',
                        dest='stats_file',
                        type=str,
                        default='stats.h5',
                        help='Name of output QA hdf5 statistics file, e.g. stats.h5'
                        )

    parser.add_argument('--plots', '--plots_file',
                        dest='plots_file',
                        type=str,
                        default='plots.pdf',
                        help='Name of output QA plots file, e.g. plots.pdf'
                        )

    parser.add_argument('--validate', '--val',
                        dest='validate',
                        action='store_true',
                        default=False,
                        help='TODO'
                        )

    parser.add_argument('--quality', '--qual',
                        dest='quality',
                        action='store_true',
                        default=False,  
                        help='TODO'
                        )

    # parser.add_argument('-v', '--verbose',
    #                     dest='verbose',
    #                     action='store_true',
    #                     default=False,
    #                     help='Display progress, warnings, and errors in Terminal'
    #                     )

    parser.add_argument('--xml', '--xml_file',
                        dest='xml_file',
                        type=str,
                        default=xml_default,
                        help='.xml file which specifies the HDF5 layout '
                             'of the input NISAR product.'
                             'Will only be used if --validate is selected.'
                        )

    # put args into a dictionary
    args = vars(parser.parse_args())

    return args


def parse_yaml(yaml_file):
    # TODO - use ruamel yaml
    pass


def verify_inputs(args):
    # TODO - check that input arguments are valid
    pass

